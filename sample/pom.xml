<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.lambadaframework</groupId>
    <artifactId>sample</artifactId>
    <packaging>jar</packaging>
    <version>0.0.8</version>
    <name>Sample</name>
    <properties>
        <lambada.version>0.0.8-SNAPSHOT</lambada.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <deployment.bucket>lambada-test123</deployment.bucket>
        <deployment.package>org.lambadaframework.example</deployment.package>
        <!-- Region to deploy-->
        <deployment.region>us-east-1</deployment.region>
        <!-- Stage to deploy -->
        <deployment.stage>production</deployment.stage>
        <!-- Maximum execution time for lambda -->
        <deployment.maximumExecutionTime>10</deployment.maximumExecutionTime>
        <!-- Maximum allowed memory usage for lambda -->
        <deployment.lambdaMemorySize>1024</deployment.lambdaMemorySize>
        <!-- lambda Handler -->
        <deployment.lambdaHandler>org.lambadaframework.runtime.ProxyHandler</deployment.lambdaHandler>
        <deployment.lambdaRunnabe>org.lambadaframework.example.controllers.LambdaRunnableImp</deployment.lambdaRunnabe>
         <jersey.version>2.6</jersey.version>
         <spring.version>4.3.0.RELEASE</spring.version>
    </properties>
    <dependencies>
    	<dependency>
            <groupId>org.lambadaframework</groupId>
            <artifactId>web-runtime</artifactId>
            <version>${lambada.version}</version>
        </dependency>
    	<dependency>
	  		<groupId>com.amazonaws</groupId>
	  		<artifactId>aws-java-sdk-lambda</artifactId>
	  		<version>1.11.9</version>
  		</dependency>
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-lambda-java-log4j</artifactId>
            <version>1.0.0</version>
        </dependency>
        <dependency>
  			<groupId>log4j</groupId>
  			<artifactId>log4j</artifactId>
  			<version>1.2.17</version>
  		</dependency>
  		 <dependency>
  			<groupId>com.amazonaws</groupId>
  			<artifactId>aws-lambda-java-core</artifactId>
  			<version>1.1.0</version>
  		</dependency>
        <dependency>
			<groupId>org.glassfish.jersey.ext</groupId>
			<artifactId>jersey-spring3</artifactId>
			<version>${jersey.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-beans</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-context</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-web</artifactId>
				</exclusion>
				<exclusion>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<version>${jersey.version}</version>
		</dependency>
		
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
			<exclusions>
				<exclusion>
					<artifactId>commons-logging</artifactId>
					<groupId>commons-logging</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<version>9.0.3.v20130506</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-util</artifactId>
			<version>9.0.3.v20130506</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-servlet</artifactId>
			<version>9.0.3.v20130506</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<version>9.0.3.v20130506</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-annotations</artifactId>
			<version>9.0.3.v20130506</version>
			<exclusions>
				<exclusion>
					<groupId>org.eclipse.jetty.orbit</groupId>
					<artifactId>javax.annotation</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-client</artifactId>
			<version>9.0.3.v20130506</version>
		</dependency>
    </dependencies>
    
    <build>
        <plugins>
        	<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<warSourceExcludes>**/*</warSourceExcludes> <!-- don't copy webapp sources, instead use webapp to compile src/main/webapp 
						into target/ -->
				</configuration>
			</plugin>
            <plugin>
                <groupId>org.lambadaframework</groupId>
                <artifactId>lambada-maven-plugin</artifactId>
                <version>${lambada.version}</version>
                <configuration>
                    <packageName>${deployment.package}</packageName>
                    <regionToDeploy>${deployment.region}</regionToDeploy>
                    <stageToDeploy>${deployment.stage}</stageToDeploy>
                    <lambdaMaximumExecutionTime>${deployment.maximumExecutionTime}</lambdaMaximumExecutionTime>
                    <lambdaMemorySize>${deployment.lambdaMemorySize}</lambdaMemorySize>
                    <lambdaHandler>${deployment.lambdaHandler}</lambdaHandler>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare</goal>
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--
            Maven Shade plugin packages the project to a fat JAR with all required dependencies.
            With minimum dependencies it should create a 5 MB jar file.
            -->
            <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.4.3</version>
				<configuration>
					<filters>
				        <filter>
				            <artifact>*:*</artifact>
				            <excludes>
				                <exclude>META-INF/*.SF</exclude>
				                <exclude>META-INF/*.DSA</exclude>
				                <exclude>META-INF/*.RSA</exclude>
				            </excludes>
				        </filter>
    				</filters>
					<minimizeJar>false</minimizeJar>
					<transformers>
						<transformer
							implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
							<mainClass>org.lambadaframework.webruntime.Main</mainClass>
						</transformer>
					</transformers>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
					</execution>
				</executions>
			</plugin>           
            
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.2</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>9.3.0.v20150612</version>
				<configuration>
					<reload>automatic</reload>
					<scanIntervalSeconds>1</scanIntervalSeconds>
					<webApp>
						<contextPath>/</contextPath>
					</webApp>
					<scanTargets>
						<scanTarget>./target/classes</scanTarget>
					</scanTargets>
					<systemProperties>
						<force>true</force>
						<systemProperty>
							<name>env</name>
							<value>dev</value>
						</systemProperty>
					</systemProperties>
				</configuration>
			</plugin>
			<plugin>
				    <groupId>org.codehaus.mojo</groupId>
				    <artifactId>exec-maven-plugin</artifactId>
				    <version>1.3.2</version>
				    <executions>
				        <execution>
				            <goals>
				                <goal>exec</goal>
				            </goals>
				        </execution>
				    </executions>
				    <configuration>
				        <mainClass>org.lambadaframework.example.runtime.Main</mainClass>
				        <!-- <systemProperties>
				            <systemProperty>
				                <key>deployment.lambdaRunnabe</key>
				                <value>org.lambadaframework.example.controllers.LambdaRunnableImp</value>
				            </systemProperty>
				        </systemProperties> -->
				    </configuration>
			</plugin>
        </plugins>
        <extensions>
            <extension>
                <groupId>org.lambadaframework</groupId>
                <artifactId>wagon</artifactId>
                <version>${lambada.version}</version>
            </extension>
        </extensions>
    </build>
    <distributionManagement>
        <repository>
            <id>aws-releases</id>
            <name>AWS Release Repository</name>
            <url>s3://${deployment.bucket}/releases</url>
        </repository>
        <snapshotRepository>
            <id>aws-snapshots</id>
            <name>AWS Snapshot Repository</name>
            <url>s3://${deployment.bucket}/snapshots</url>
        </snapshotRepository>
    </distributionManagement>
</project>
